@using ProMag.Shared.DataTransferObjects.CreateDtos
@inject IProjectService ProjectService
@inject IMainTaskService MainTaskService

<MudText Typo="Typo.h4">@Project?.Name?.ToUpper()</MudText>
<MudButton OnClick="@this.RefreshContainer"></MudButton>
<MudDivider Class="my-3"/>

<MudDropContainer T="KanbanTask" @ref="_dropContainer" Items="_tasks" ItemsSelector="@((item, column) => item.Status == column)" ItemDropped="TaskUpdated" Class="d-flex flex-row flex-nowrap overflow-scroll">
    <ChildContent>
        @foreach (var item in _sections)
        {
            <MudPaper Elevation="0" MinWidth="20vw" MinHeight="60vh" Class="pa-4 ma-4 d-flex flex-column mud-background-gray rounded-lg">
                <MudToolBar DisableGutters="true">
                    <MudText Typo="Typo.subtitle1">
                        <b>@item.Name</b>
                    </MudText>
                    <MudSpacer/>
                </MudToolBar>
                <MudDropZone T="KanbanTask" Identifier="@item.Name" Class="mud-height-full"/>
                @if (item.NewTaskOpen)
                {
                    <MudPaper Elevation="25" Class="pa-2 rounded-lg">
                        <MudTextField @bind-Value="item.NewTaskName" Placeholder="New Task" DisableUnderLine="true" Margin="Margin.Dense" Class="mx-2 mt-n2"></MudTextField>
                        <MudButton OnClick="@(() => AddTask(item))" Size="Size.Small" Color="Color.Primary" FullWidth="true">Add Task</MudButton>
                    </MudPaper>
                }
                else
                {
                    <MudButton OnClick="@(() => item.NewTaskOpen = !item.NewTaskOpen)" StartIcon="@Icons.Filled.Add" FullWidth="true" Class="rounded-lg py-2">Add Task</MudButton>
                }
            </MudPaper>
        }
    </ChildContent>
    <ItemRenderer>
        <MudPaper Elevation="25" Class="pa-4 rounded-lg my-3">
            @context.Name
            <MudIconButton Icon="@Icons.Filled.Info" OnClick="@(()=>{_currentTask = @context; OpenDrawer();})"></MudIconButton>
        </MudPaper>
    </ItemRenderer>
</MudDropContainer>

<MudDrawer @bind-Open="_drawerOpen" Fixed="true" ClipMode="DrawerClipMode.Docked" Anchor="Anchor.End" Elevation="1">
    <MudDrawerHeader>
        <MudText Typo="Typo.h6" Class="px-4">@_currentTask.Name?.ToUpper()</MudText>
        <MudIconButton Icon="@Icons.Filled.Info" OnClick="@(CloseDrawer)"></MudIconButton>
    </MudDrawerHeader>
    <MudText Typo="Typo.body1" Class="my-2">@_currentTask.Id - @_currentTask.Name</MudText>
</MudDrawer>

@code 
{
    #region Parameters
    [Parameter]
    public ProjectReadDto? Project { get; set; } = new();
    #endregion

    #region Class Properties
        private const int NO_STATUS_ID = 0;
        private const string NO_STATUS = "No Status";

    private static List<KanbanSection> _baseSections = new();

    private List<KanbanTask> _tasks { get; set; } = new();
    private List<KanbanSection> _sections { get; set; } = _baseSections;

    private MudDropContainer<KanbanTask>? _dropContainer;
    #endregion

    #region Component Render
    protected override async Task OnInitializedAsync()
    {
        var sections = await ProjectService.GetSectionsAsync();

        _baseSections = sections
            .Select(s => new KanbanSection(s.Id, s.Name))
            .ToList();

        _sections = _baseSections;
    }

    protected override void OnParametersSet()
    {
        if (Project != null && Project.MainTasks != null && Project.MainTasks.Any())
        {
            _tasks = Project.MainTasks
                ?.Select(mt => mt.Status != null
                    ? new KanbanTask(mt.Id, mt.Name!, mt.Status.Id, mt.Status.Name!)
                    : new KanbanTask(mt.Id, mt.Name!))
                .ToList()
                     ?? new List<KanbanTask>();

            if (_tasks.Any(t => t.StatusId == NO_STATUS_ID))
            {
                _sections.Add(new KanbanSection(NO_STATUS_ID, NO_STATUS));
            }
        }
        else
        {
            _tasks.Clear();
            _sections = _baseSections;
        }

        RefreshContainer();
    }
    #endregion

    #region Board Functions
    private async Task AddTask(KanbanSection section)
    {
        if (Project == null) return;

        MainTaskCreateDto newTask = new()
        {
            Name = section.NewTaskName,
            ProjectId = Project.Id,
            StatusId = section.Id
        };

        try
        {
            var createdTask = await MainTaskService.CreateAsync(newTask);

            _tasks.Add(new KanbanTask(createdTask.Id, section.NewTaskName, section.Id, section.Name));
        }
        catch (Exception e)
        {
            Console.WriteLine(e);

            // TODO: Pop-up error msg
        }
        finally
        {
            section.NewTaskName = string.Empty;
            section.NewTaskOpen = false;

            RefreshContainer();
        }
    }

    private void RefreshContainer()
    {
        StateHasChanged();
        _dropContainer?.Refresh();
    }
    #endregion

    #region Board Events
    private void TaskUpdated(MudItemDropInfo<KanbanTask> dropItem)
    {
        dropItem.Item.Status = dropItem.DropzoneIdentifier;
    }
    #endregion

    #region Task Detailed Drawer
    private KanbanTask _currentTask = new();
    
    private bool _drawerOpen = false;

    private void OpenDrawer()
    {
        _drawerOpen = true;
    }

    private void CloseDrawer()
    {
        _drawerOpen = false;
    }
    #endregion

    #region Kanban Classes
    public class KanbanTask
    {
        public int Id { get; set; }
        public string Name { get; set; }
        public int StatusId { get; set; }
        public string Status { get; set; }
        public KanbanTask(int id, string name, int statusId, string status)
        {
            Id = id;
            Name = name;
            StatusId = statusId;
            Status = status;
        }
        public KanbanTask(int id, string name)
        {
            Id = id;
            Name = name;
            StatusId = NO_STATUS_ID;
            Status = NO_STATUS;
        }

        public KanbanTask()
        {
            Id = 0;
            Name = string.Empty;
            StatusId = NO_STATUS_ID;
            Status = NO_STATUS;
        }
    }

    public class KanbanSection
    {
        public int Id { get; set; }
        public string Name { get; set; }
        public bool NewTaskOpen { get; set; } = false;
        public string NewTaskName { get; set; } = string.Empty;
        public KanbanSection(int id, string name)
        {
            Id = id;
            Name = name;
        }
        public KanbanSection()
        {
            Id = NO_STATUS_ID;
            Name = NO_STATUS;
        }
    }

    #endregion
}