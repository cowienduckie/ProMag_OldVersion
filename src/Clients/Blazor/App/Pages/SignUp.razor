@page "/signup"
@using ProMag.Client.Blazor.App.Helpers
@inject IAuthenticationService AuthenticationService
@inject NavigationManager NavigationManager

<EditForm Model="@model" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator/>
    <MudGrid>
        <MudItem xs="12" sm="6">
            <MudCard>
                <MudCardHeader>
                    <MudText Typo="Typo.h4">SIGN UP</MudText>
                </MudCardHeader>
                <MudCardContent>
                    <MudTextField Label="First name"
                                  @bind-Value="model.FirstName" For="@(() => model.FirstName)" />
                    <MudTextField Label="Last name" Class="mt-3"
                                  @bind-Value="model.LastName" For="@(() => model.LastName)" />
                    <MudTextField Label="Username" Class="mt-3"
                                  @bind-Value="model.UserName" For="@(() => model.UserName)"/>
                    <MudTextField Label="Email" Class="mt-3"
                                  @bind-Value="model.Email" For="@(() => model.Email)"/>
                    <MudTextField Label="Password" HelperText="Choose a strong password" Class="mt-3"
                                  @bind-Value="model.Password" For="@(() => model.Password)" InputType="InputType.Password"/>
                    <MudTextField Label="Password" HelperText="Repeat the password" Class="mt-3"
                                  @bind-Value="model.ConfirmPassword" For="@(() => model.ConfirmPassword)" InputType="InputType.Password"/>
                </MudCardContent>
                <MudCardActions>
                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Sign Up</MudButton>
                </MudCardActions>
            </MudCard>
        </MudItem>
    </MudGrid>
</EditForm>

@code {
    private readonly SignUpRequestModel model = new();
    private bool loading;
    private string error;

    protected override void OnInitialized()
    {
    // redirect to home if already logged in
        if (AuthenticationService.User != null)
        {
            NavigationManager.NavigateTo("");
        }
    }

    private async void HandleValidSubmit()
    {
        loading = true;
        try
        {
            var result = await AuthenticationService.SignUp(model);

            if (result)
            {
                var returnUrl = NavigationManager.QueryString("returnUrl") ?? "/";
                NavigationManager.NavigateTo(returnUrl);
            }
        }
        catch (Exception ex)
        {
            error = ex.Message;
            loading = false;
            StateHasChanged();
        }
    }

}